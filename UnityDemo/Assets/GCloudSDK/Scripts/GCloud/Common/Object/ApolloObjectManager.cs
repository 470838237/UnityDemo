// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;
using System.Reflection;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace GCloud
{
    [AttributeUsage(AttributeTargets.Method)]
    public sealed class MonoPInvokeCallbackAttribute : Attribute
    {
        public MonoPInvokeCallbackAttribute(Type t)
        {
        }
    }

	delegate void ApolloSendMessageDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, [MarshalAs(UnmanagedType.LPStr)]string param);
	delegate void ApolloSendStructDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, IntPtr param);
	delegate void ApolloSendResultDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, int result);
	delegate void ApolloSendResultStructDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, IntPtr resultBuffer, int size);
	delegate void ApolloSendBufferDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, IntPtr buffer, int size);
	delegate void ApolloSendResultBufferDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, int result, IntPtr buffer, int size);
	delegate void ApolloSendResultStructBufferDelegate(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string function, IntPtr resultBuffer, int resultSize, IntPtr buffer, int size);
	delegate void ApolloSendVoidMethodDelegate(UInt64 objectId, int methodId);

	internal sealed class ApolloObjectManager : MonoBehaviour
    {
        Dictionary<UInt64, ApolloObject> dictObjectCollection = new Dictionary<ulong, ApolloObject>();
        private ApolloObjectManager()
        {
            setApolloSendMessageCallback(new ApolloSendMessageDelegate(onSendMessage));
			setApolloSendStructCallback(new ApolloSendStructDelegate(onSendStruct));
			setApolloSendResultCallback(new ApolloSendResultDelegate(onSendResult));
			setApolloSendResultStructCallback(new ApolloSendResultStructDelegate(onSendResultStruct));
			setApolloSendBufferCallback(new ApolloSendBufferDelegate(onSendBuffer));
			setApolloSendResultBufferCallback(new ApolloSendResultBufferDelegate(onSendResultBuffer));
			setApolloSendResultStructBufferCallback(new ApolloSendResultStructBufferDelegate(onSendResultStructBuffer));
			setApolloSendVoidMethodCallback(new ApolloSendVoidMethodDelegate(onSendVoidMethod));
        }

        static GameObject container = null;
        static ApolloObjectManager instance = null;

        static bool init = false;
        static public ApolloObjectManager Instance
        {
            get
            {
                if (!init)
                {
                    init = true;
                    if (container == null)
                    {
                        container = new GameObject();
                        DontDestroyOnLoad(container);
                    }
                    instance = container.AddComponent(typeof(ApolloObjectManager)) as ApolloObjectManager;
                    
#if UNITY_EDITOR
                    EditorApplication.playmodeStateChanged += () =>
                        {
                            ADebug.Log("playmodeStateChanged isPlaying:" + EditorApplication.isPlaying + " isPlayingOrWillChangePlaymode:" + EditorApplication.isPlayingOrWillChangePlaymode);
                            if (EditorApplication.isPlaying && !EditorApplication.isPlayingOrWillChangePlaymode)
                            {
                                ADebug.Log("gcloud_quit");
								instance.OnApplicationQuit();
                                ADebug.Log("gcloud_quit end");
                            }
                        };
#endif
                }
                return instance;
            }
        }
        #region ApolloObject
        public void AddObject(ApolloObject obj)
        {
            if (obj == null)
            {
                return;
            }

            if(!dictObjectCollection.ContainsKey(obj.ObjectId))
            {
                dictObjectCollection.Add(obj.ObjectId, obj);

                //ADebug.Log("ApolloObjectManager AddObject:" + obj.ObjectId + " name:" + obj.GetType().FullName);
				addPlatformObject(obj.ObjectId, obj.GetType().FullName);
                //ADebug.Log("ApolloObjectManager after addApolloObject");
            }
        }

        public void RemoveObject(ApolloObject obj)
        {
            if (obj == null)
            {
                return;
            }
            if(dictObjectCollection.ContainsKey(obj.ObjectId))
            {
                dictObjectCollection.Remove(obj.ObjectId);
				removePlatformObject(obj.ObjectId);
            }
        }

		public void ClearObjects()
		{
			foreach(UInt64 key in dictObjectCollection.Keys)
			{
				ApolloObject obj = dictObjectCollection[key];
				removePlatformObject(obj.ObjectId);
			}
			dictObjectCollection.Clear ();
		}
        
        [MonoPInvokeCallback(typeof(ApolloSendMessageDelegate))]
        static void onSendMessage(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, [MarshalAs(UnmanagedType.LPStr)]string param)
        {
            if(!ApolloObjectManager.Instance.dictObjectCollection.ContainsKey(objectId))
            {
                ADebug.LogError("onSendMessage not exist: " + objectId + " function:" + function + " param:" + param);
                return;
            }
            ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
            if (obj != null && function != null)
            {
                Type type = obj.GetType();
                
                MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
                                                   new Type[]{typeof(string)}, null);
                if(method != null)
                {
                    method.Invoke(obj, new object[]{param});
                    //ADebug.Log("onSendMessage success");
                }
                else
                {
                    ADebug.LogError("onSendMessage not exist method:" + function);
                }


            } 
            else
            {
                ADebug.Log("onSendMessage:" + objectId + " do not exist");
            }
        }
		
		[MonoPInvokeCallback(typeof(ApolloSendResultDelegate))]
		static void onSendResult(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, int result)
		{
			//ADebug.Log("onSendResult enter:"+function+" "+objectId);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null && function != null)
			{
				Type type = obj.GetType();
				
				
				MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
				                                   new Type[]{typeof(int)}, null);
				if(method != null)
				{
					method.Invoke(obj, new object[]{result});
					//ADebug.Log("onSendStruct success");
				}
				else
				{
					ADebug.LogError("onSendResult not exist method:" + function + " " + type.FullName);
				}
			} 
			else
			{
				ADebug.LogError("onSendResult:" + objectId + " do not exist");
			}
		}

		[MonoPInvokeCallback(typeof(ApolloSendResultStructDelegate))]
		static void onSendResultStruct(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, IntPtr resultBuffer, int resultLen)
		{
			ADebug.Log("onSendResultStruct enter:"+function+" "+objectId);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null && function != null)
			{
				Type type = obj.GetType();
				
				
				MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
				                                   new Type[]{typeof(Result)}, null);
				if(method != null)
				{
					Result result = Result.Unknown;
					byte[] resultBuf = new byte[resultLen];
					if(resultBuffer != IntPtr.Zero && resultLen > 0)
					{
						Marshal.Copy(resultBuffer, resultBuf, 0, resultLen);
						
						if(!result.Decode(resultBuf))
						{
							ADebug.LogError("onSendResultStruct decode Error");
							return;
						}
					}
					else
					{
						ADebug.LogError("onSendResultStruct param Error");
					}

					method.Invoke(obj, new object[]{result});
					//ADebug.Log("onSendStruct success");
				}
				else
				{
					ADebug.LogError("onSendResult not exist method:" + function + " " + type.FullName);
				}
			} 
			else
			{
				ADebug.LogError("onSendResult:" + objectId + " do not exist");
			}
		}
		
		[MonoPInvokeCallback(typeof(ApolloSendStructDelegate))]
		static void onSendStruct(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, IntPtr param)
		{
			//ADebug.Log("onSendStruct enter:"+function+" "+objectId);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null && function != null)
			{
				Type type = obj.GetType();
				
				
				MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
				                                   new Type[]{typeof(IntPtr)}, null);
				if(method != null)
				{
					method.Invoke(obj, new object[]{param});
					//ADebug.Log("onSendStruct success");
				}
				else
				{
					ADebug.LogError("onSendStruct not exist method:" + function + " " + type.FullName);
				}
			} 
			else
			{
				ADebug.LogError("onSendStruct:" + objectId + " do not exist");
			}
		}
        
        [MonoPInvokeCallback(typeof(ApolloSendBufferDelegate))]
        static void onSendBuffer(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, IntPtr buffer, int len)
        {
            //ADebug.Log("onSendBuffer enter:"+function+" "+objectId  + " buffer len:" + len);
            ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
            if (obj != null && function != null)
            {
                Type type = obj.GetType();

                MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
                                                   new Type[]{typeof(byte[])}, null);
                if(method != null)
                {
                    byte[] data = new byte[len];
                    Marshal.Copy(buffer, data, 0, len);
                    method.Invoke(obj, new object[]{data});
                    //ADebug.Log("onSendBuffer success");
                }
                else
                {
                    ADebug.LogError("onSendBuffer not exist method:" + function + " " + type.FullName);
                }
            } 
            else
            {
                ADebug.LogError("onSendBuffer:" + objectId + " do not exist");
            }
		}
		
		[MonoPInvokeCallback(typeof(ApolloSendResultBufferDelegate))]
		static void onSendResultBuffer(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, int result, IntPtr buffer, int len)
		{
			//ADebug.Log("onSendResultBuffer enter:"+function+" "+objectId  + " buffer len:" + len);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null && function != null)
			{
				Type type = obj.GetType();
				
				MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
				                                   new Type[]{typeof(int), typeof(byte[])}, null);
				if(method != null)
				{
					byte[] data = new byte[len];
					if(buffer != IntPtr.Zero && len > 0)
					{
						Marshal.Copy(buffer, data, 0, len);
					}
					method.Invoke(obj, new object[]{result, data});
					//ADebug.Log("onSendResultBuffer success");
				}
				else
				{
					ADebug.LogError("onSendResultBuffer not exist method:" + function + " " + type.FullName);
				}
			} 
			else
			{
				ADebug.LogError("onSendResultBuffer:" + objectId + " do not exist");
			}
		}
		
		[MonoPInvokeCallback(typeof(ApolloSendResultStructBufferDelegate))]
		static void onSendResultStructBuffer(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)]string function, IntPtr resultBuffer, int resultLen, IntPtr buffer, int len)
		{
			ADebug.Log("onSendResultStructBuffer enter:"+function+" "+objectId  + " buffer len:" + len);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null && function != null)
			{
				Type type = obj.GetType();
				
				MethodInfo method = type.GetMethod(function, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreReturn | BindingFlags.NonPublic | BindingFlags.Static, null, 
				                                   new Type[]{typeof(Result), typeof(byte[])}, null);
				if(method != null)
				{
					Result result = Result.Unknown;
					if(resultBuffer != IntPtr.Zero && resultLen > 0)
					{
						byte[] resultBuf = new byte[resultLen];
						Marshal.Copy(resultBuffer, resultBuf, 0, resultLen);

						if(!result.Decode(resultBuf))
						{
							ADebug.LogError("onSendResultStructBuffer decode Error");
							return;
						}
					}
					else
					{
						ADebug.LogError("onSendResultStructBuffer param Error");
						return;
					}

					byte[] data = new byte[len];
					if(buffer != IntPtr.Zero && len > 0)
					{
						Marshal.Copy(buffer, data, 0, len);
					}
					method.Invoke(obj, new object[]{result, data});
					//ADebug.Log("onSendResultBuffer success");
				}
				else
				{
					ADebug.LogError("onSendResultBuffer not exist method:" + function + " " + type.FullName);
				}
			} 
			else
			{
				ADebug.LogError("onSendResultBuffer:" + objectId + " do not exist");
			}
		}
		
		[MonoPInvokeCallback(typeof(ApolloSendVoidMethodDelegate))]
		static void onSendVoidMethod(UInt64 objectId, int methodId)
		{
			ADebug.Log ("onSendVoidMethod objectID:" + objectId + " methodID:" + methodId);
			ApolloObject obj = ApolloObjectManager.Instance.dictObjectCollection [objectId];
			if (obj != null)
			{
				obj.PerformVoidMethodWithId(methodId);
			} 
			else
			{
				ADebug.LogError("onSendVoidMethod:" + objectId + " do not exist");
			}
		}

        #region Dllimport
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void addPlatformObject(UInt64 objectId, [MarshalAs(UnmanagedType.LPStr)] string objName);
        
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void removePlatformObject(UInt64 objectId);
        
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendMessageCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendMessageDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendStructCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendStructDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendResultCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendResultDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendResultStructCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendResultStructDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendBufferCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendBufferDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendResultBufferCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendResultBufferDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendResultStructBufferCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendResultStructBufferDelegate callback);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void setApolloSendVoidMethodCallback([MarshalAs(UnmanagedType.FunctionPtr)]ApolloSendVoidMethodDelegate callback);
        #endregion

        #endregion // ApolloObject

        #region Update

        void Awake()
        {
            //DontDestroyOnLoad(this.gameObject);
        }
		
		List<ApolloObject> removedUpdatableList = new List<ApolloObject> ();
		List<ApolloObject> removedReflectibleList = new List<ApolloObject> ();
		
		public void Update()
		{
			////////////////////////////////////////////////////////////////////////////////////
			// acceptUpdatedObjectList
			////////////////////////////////////////////////////////////////////////////////////
			for(int i = 0; i < acceptUpdatedObjectList.Count; i++)
			{
				ApolloObject o = acceptUpdatedObjectList[i];
				
				if(o.Removable)
				{
					removedUpdatableList.Add(o);
				}
				else
				{
					o.Update();
				}
			}
			
			for (int i = 0; i < removedUpdatableList.Count; i++) 
			{
				ApolloObject o = removedUpdatableList[i]; 
				if(o != null)
				{
					RemoveAcceptUpdatedObject(o);
				}
			}
			removedUpdatableList.Clear ();
			
			////////////////////////////////////////////////////////////////////////////////////
			// removedReflectibleList
			////////////////////////////////////////////////////////////////////////////////////
			
			Dictionary<UInt64, ApolloObject>.Enumerator enumerator = dictObjectCollection.GetEnumerator ();
			
			while (enumerator.MoveNext()) 
			{
				KeyValuePair<UInt64, ApolloObject> pair = enumerator.Current;
				ApolloObject o = pair.Value as ApolloObject;
				
				if(o != null && o.Removable)
				{
					removedReflectibleList.Add(o);
				}
			}
			
			for (int i = 0; i < removedReflectibleList.Count; i++) 
			{
				ApolloObject o = removedReflectibleList[i]; 
				if(o != null)
				{
					RemoveObject(o);
				}
			}
			removedReflectibleList.Clear ();
		}

        List<ApolloObject> acceptUpdatedObjectList  = new List<ApolloObject>();
        public void AddAcceptUpdatedObject(ApolloObject obj)
        {
            if(obj != null && !acceptUpdatedObjectList.Contains(obj))
            {
                acceptUpdatedObjectList.Add(obj);
            }
        }
        public void RemoveAcceptUpdatedObject(ApolloObject obj)
        {
            if(obj != null && acceptUpdatedObjectList.Contains(obj))
            {
                acceptUpdatedObjectList.Remove(obj);
            }
        }
        #endregion

        #region Mono Event
        public void OnApplicationQuit()
        {
            ADebug.Log("ObjectManager OnApplicationQuit");
            for(int j = 0; j < acceptUpdatedObjectList.Count; j++)
            {
                ApolloObject obj = acceptUpdatedObjectList[j];
                obj.OnApplicationQuit();
            }
            acceptUpdatedObjectList.Clear();

			ClearObjects ();

            gcloud_quit();

        }

        public void OnApplicationPause(bool pauseStatus)
        {
            ADebug.Log("ObjectManager OnApplicationPause:" + pauseStatus);
            for (int j = 0; j < acceptUpdatedObjectList.Count; j++)
            {
                ApolloObject obj = acceptUpdatedObjectList[j];
                obj.OnApplicationPause(pauseStatus);
            }
        }

        public void OnDisable()
        {
            ADebug.Log("ObjectManager OnDisable");
            for (int j = 0; j < acceptUpdatedObjectList.Count; j++)
            {
                ApolloObject obj = acceptUpdatedObjectList[j];
                obj.OnDisable();
            }
            acceptUpdatedObjectList.Clear();
        }

        #endregion


        #region Dllimport
		[DllImport(GCloudCommon.PluginName, CallingConvention = CallingConvention.Cdecl)]
        private static extern void gcloud_quit();
        #endregion
    }
}

