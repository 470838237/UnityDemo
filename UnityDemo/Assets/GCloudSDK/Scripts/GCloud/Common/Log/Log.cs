// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.IO;
using UnityEngine;


namespace GCloud
{
    public class ADebug
    {
        private class ADebugImplement : ApolloObject
        {

            public ADebugImplement()
                : base(false, true)
            {
                init();
            }

            FileStream fileStream = null;
#if UNITY_STANDALONE_WIN || UNITY_EDITOR
            StreamWriter streamWriter = null;
#endif
            void init()
            {
                if (fileStream == null)
                {
#if UNITY_STANDALONE_WIN || UNITY_EDITOR
					try
					{
                    	string currentPath = System.Environment.CurrentDirectory + "\\" + DateTime.Now.ToString("yyyy-MM-dd") + ".log";
                    	fileStream = new FileStream(currentPath, FileMode.Append);
                    	streamWriter = new StreamWriter(fileStream);
					}
					catch(Exception ex)
					{
						fileStream = null;
						streamWriter = null;
                        //Debug.LogError(ex);
                        UnityEngine.Debug.Log(ex);
					}
#endif
                }
            }

            void writeToFile(string log)
            {
#if UNITY_STANDALONE_WIN || UNITY_EDITOR
                if (streamWriter != null)
                {
                    streamWriter.WriteLine(log);
                }
#endif
            }

            string formatMessage(object message)
            {
                return DateTime.Now.ToString("[yyyy-MM-dd HH:mm:ss:fff] ") + message;
            }



            public override void OnDisable()
            {
#if UNITY_STANDALONE_WIN || UNITY_EDITOR
                streamWriter.Flush();
                streamWriter.Close();
                fileStream.Close();
                streamWriter = null;
                fileStream = null;
#endif
            }


            public void Log(object message)
            {
                string log = formatMessage(message);
                //System.Console.WriteLine( log);
                UnityEngine.Debug.Log(message);
                writeToFile(log);
            }

            public void LogError(object message)
            {
                string log = formatMessage(message);
                //System.Console.WriteLine("[Apollo Error]:" +  log);
                UnityEngine.Debug.LogError(message);
                writeToFile(log);
            }

            public void LogException(Exception exception)
            {
                //System.Console.WriteLine("[Apollo Exception]:" + exception);
                UnityEngine.Debug.LogException(exception);
                writeToFile(exception.ToString());
            }
        }

        static ADebugImplement implement = new ADebugImplement();

        public enum LogPriority
        {
            Info,
			Event,
            Error,
            None,
        }
        public static LogPriority Level = LogPriority.Info;

        [Conditional("DEBUG")]
        static public void Log(object message)
        {
            if (Level > LogPriority.Info)
            {
                return;
            }
            implement.Log(message);
		}
		
		[Conditional("DEBUG")]
		static public void LogEvent(object message)
		{
			if (Level > LogPriority.Event)
			{
				return;
			}
			implement.Log(message);
		}
		
		[Conditional("DEBUG")]
		static public void LogError(object message)
		{
			if (Level > LogPriority.Error)
			{
				return;
			}
			implement.LogError(message);
		}

        [Conditional("DEBUG")]
        static public void LogException(Exception exception)
        {
            if (Level > LogPriority.Error)
            {
                return;
            }
            implement.LogException(exception);
        }

        [Conditional("DEBUG")]
		static public void LogHex(string prefix, byte[] data, int len = -1)
		{
			if (Level > LogPriority.Info)
			{
				return;
			}
			if(data != null)
			{
				if (len == -1) {
					len = data.Length;
				}
				
				string dataString = "";
				for(int i = 0; i < len; i++)
				{
					dataString += "0x" + data[i].ToString("X") + " ";
				}
				
				Log(prefix + "[" + dataString + "]");
			}
		}

    }
}

