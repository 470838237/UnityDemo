// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;

namespace GCloud
{
	public abstract class ApolloObject
    {
        static private UInt64 s_objectId = 1;

        public UInt64 ObjectId{ get; private set; }

        public bool AcceptMonoBehaviour { get; private set; }

        public bool Reflectible{ get; private set; }

        protected float UpdateTimeLeft { get; set; }

        private void init()
        {
            if (Reflectible)
            {
                this.ObjectId = s_objectId++;
                if (s_objectId == 0)
                {
                    s_objectId = 1;
                }
                
                ApolloObjectManager.Instance.AddObject(this);
            }

            if (AcceptMonoBehaviour)
            {
                ApolloObjectManager.Instance.AddAcceptUpdatedObject(this);
            }
        }

        protected ApolloObject()
        {
            Reflectible = true;
            AcceptMonoBehaviour = false;
			Removable = false;
            UpdateTimeLeft = -1.0f;

            init();
        }

        protected ApolloObject(bool reflectible, bool acceptMonoBehaviour)
        {
            UpdateTimeLeft = -1.0f;
            
            Reflectible = reflectible;
            AcceptMonoBehaviour = acceptMonoBehaviour;
            
            init();
        }

        ~ApolloObject()
        {
            Destroy();
        }

		
		protected void Initialize(bool reflectible, bool acceptMonoBehaviour)
		{
			UpdateTimeLeft = -1.0f;
			
			Reflectible = reflectible;
			AcceptMonoBehaviour = acceptMonoBehaviour;
			
			init();
		}

		internal bool Removable{ get; set; }
		public void Destroy()
        {
			Removable = true;
            //ApolloObjectManager.Instance.RemoveObject(this);
            //ApolloObjectManager.Instance.RemoveAcceptUpdatedObject(this);
        }
        
        public void Update()
        {
			float delta = Time.deltaTime;
            OnUpdate(delta);

            if (UpdateTimeLeft > 0)
            {
                UpdateTimeLeft -= delta;
                if (UpdateTimeLeft <= 0)
                {
                    OnTimeOut();
                }
            }
        }

        protected virtual void OnUpdate(float deltaTime)
        {
        }

        protected virtual void OnTimeOut()
        {
		}
		
		public virtual void PerformVoidMethodWithId(int methodId)
		{
		}

		#region StartCoroutine
		/*
		public Coroutine StartCoroutine (IEnumerator routine)
		{
			return ApolloObjectManager.Instance.StartCoroutine (routine);
		}

		public Coroutine StartCoroutine_Auto (IEnumerator routine)
		{
			return ApolloObjectManager.Instance.StartCoroutine_Auto (routine);
		}

		public void StopAllCoroutines ()
		{
			ApolloObjectManager.Instance.StopAllCoroutines ();
		}
		
		public void StopCoroutine (IEnumerator routine)
		{
			ApolloObjectManager.Instance.StopCoroutine (routine);
		}
		*/
//		public void StopCoroutine (Coroutine routine)
//		{
//			ApolloObjectManager.Instance.StopCoroutine (routine);
//		}
		#endregion
        
        #region Mono Event
        public virtual void OnApplicationQuit()
        {
            
        }
        public virtual void OnApplicationPause(bool pauseStatus)
        {
        }

        public virtual void OnDisable()
        {

        }

        #endregion

		#region dynamic alloc buffer object
		
		#if false
		public bool Read(string name, ref ApolloBufferBase target)
		{
			int len = abase_apollo_object_get_len(this.ObjectId, name);
			if(len > 0)
			{
				byte[] buffer = new byte[len];
				if(abase_apollo_object_read_buffer(this.ObjectId, name, buffer, len))
				{
					return target.Decode(buffer);
				}
			}
			return false;
		}
		
		public T Read<T>(string name) where T : ApolloBufferBase
		{
			ApolloBufferBase target = Activator.CreateInstance<T>();
			if(!Read(name, ref target))
			{
				return null;
			}
			return target as T;
		}

		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern int abase_apollo_object_get_len(UInt64 objId, [MarshalAs(UnmanagedType.LPStr)]string name);
		
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern bool abase_apollo_object_read_buffer(UInt64 objId, [MarshalAs(UnmanagedType.LPStr)]string name, [MarshalAs(UnmanagedType.LPArray)] byte[] buff, int size);
#endif
		#endregion
    }
}

