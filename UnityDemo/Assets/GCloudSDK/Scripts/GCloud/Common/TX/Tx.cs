// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;
using System.Reflection;

namespace GCloud
{
    delegate void TXPerformSelectorDelegate(IntPtr selector);

    public delegate void NetworkStateChangedNotify(NetworkState state);

    public class Tx : ApolloObject
    {
        public event NetworkStateChangedNotify TXNetworkChangedEvent;

        private Tx()
            : base(false, true)
        {
        }

        public static Tx Instance = new Tx();

        public void Initialize()
        {
            ADebug.Log("TX Initialize");
//#if UNITY_ANDROID
            abase_target_unity_enable_ui_update();
//#endif
#if UNITY_ANDROID || UNITY_IOS
            setNetworkChangedCallback();
#endif
        }

		public Type GetType(string name)
		{
			Type type = Type.GetType (name);
			if(type != null)
			{
				return type;
			}

			foreach(var a in AppDomain.CurrentDomain.GetAssemblies())
			{
				type = a.GetType(name);
				if(type != null)
				{
					return type;
				}
			}

			return null;
		}

        protected override void OnUpdate(float deltaTime)
        {
            //ADebug.Log("TX OnUpdate..");
//#if UNITY_ANDROID
            abase_target_unity_update();
//#endif
        }

        public NetworkState GetNetworkState()
        {
            return abase_network_GetNetworkState();
        }

        public DetailNetworkInfo GetDetailNetworkInfo()
        {
            byte[] data = new byte[256];
            DetailNetworkInfo info = new DetailNetworkInfo();
            bool ret = abase_network_GetDetailNetworkInfo(data, 256);
            if (ret)
            {
                info.Decode(data);
            }
            else
            {
                ADebug.LogError("TX GetDetailNetworkInfo fail");
            }
            return info;
        }

        //set NetworkChanged callback
        private void setNetworkChangedCallback()
        {
            abase_network_SetNetworkChangedCallback(onNetworkChanged);
        }

        //todo set NetworkChangedEvent when network changed
        [MonoPInvokeCallback(typeof(NetworkStateChangedNotify))]
        static void onNetworkChanged(NetworkState state)
        {
            if (null != Tx.Instance.TXNetworkChangedEvent)
            {
                Tx.Instance.TXNetworkChangedEvent(state);
            }
        }

        #region Dllimport
		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void abase_target_unity_enable_ui_update();

		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
		private static extern void abase_target_unity_update();

		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
        private static extern NetworkState abase_network_GetNetworkState();

        [DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
        private static extern bool abase_network_GetDetailNetworkInfo(byte[] data, int size);

		[DllImport(GCloudCommon.ABasePluginName, CallingConvention = CallingConvention.Cdecl)]
        private static extern void abase_network_SetNetworkChangedCallback([MarshalAs(UnmanagedType.FunctionPtr)]NetworkStateChangedNotify callback); 

        #endregion
    }
}

